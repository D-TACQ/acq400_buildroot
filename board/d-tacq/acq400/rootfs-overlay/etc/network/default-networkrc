#!/bin/sh

ETH=${1:-eth0}
shift
STATIC_ARGS="$*"
LINK_UP_TIMEOUT=${LINK_UP_TIMEOUT:-6}
DSCRIPT=/usr/share/udhcpc/default.script
UPID=/tmp/udhcpd.pid
KILLDONE=/tmp/killdone
## 99999 or greater to abort the countdown
DHCP_KILLER_COUNTDOWN=${DHCP_KILLER_COUNTDOWN:-10}

is_valid_mac()
{
	mac=$(cut -c1-9 /sys/class/net/$1/address)
	if [ "x$mac" = "x00:21:54:" ]; then
		echo 1
	else
		echo >&2 "WARNING: $1 invalid MAC $mac detected"
		echo 0
	fi
}



start_eth() {
	if [ ! -e /sys/class/net/${ETH} ]; then
		echo "NOTICE: /sys/class/net/${ETH} backgrounding.."
		LINK_UP_TIMEOUT=99999 /etc/network/default-networkrc $ETH $STATIC_ARGS &
		exit
	fi
        ifconfig ${ETH} up

	timer=$LINK_UP_TIMEOUT
        while [ $timer -gt 0 ]; do
                grep -q "up" /sys/class/net/${ETH}/operstate 
                if [ $? == 0 ]; then
                        echo "${ETH} ethernet link up"
			return
                else
			if [ $timer -le 10 ] || [ $(($timer%20)) -eq 0 ]; then
	                        echo "${ETH} Waiting for link up ... $timer"
			fi
			sleep 1
			timer=$(($timer-1))
                fi
        done
	echo "NOTICE: /sys/class/net/${ETH} no link, backgrounding.."
	LINK_UP_TIMEOUT=9999 /etc/network/default-networkrc $ETH $STATIC_ARGS &
	exit
}

get_mac_address() {
	cat /sys/class/net/${ETH}/address
}

set_fallback_static_ip() {
	MAC=$(get_mac_address)
	let DMINOR=$(printf "%d" 0x$(echo ${MAC##*:}))
	let IPMINOR="$DMINOR==200? 200: $DMINOR%200"
	IP=192.168.0.$IPMINOR
	echo +++ setting fallback static ip $IP
	ifconfig ${ETH} $IP up
}

dhcp_killer() {
	sleep 5
	let countdown=$DHCP_KILLER_COUNTDOWN
	while [ $countdown -gt 0 ]; do
		echo +++ dhcp_killer counting $countdown
		let countdown=$countdown-1
		sleep 1
	done
	echo +++ dhcp_killer ...
	if [ -e $UPID ]; then
		KPID=$(cat $UPID)
		rm $UPID
		kill -9 $KPID
		echo dhcp_killer kill $KPID
		echo dhcp_killer kill $KPID >$KILLDONE
	fi
	set_fallback_static_ip
}

# execution starts here 

if [ $LINK_UP_TIMEOUT -gt 999 ]; then
# wait for link up forever
	wait_dev=0
	report_dev=0
	while [ ! -e /sys/class/net/${ETH} ] || [ $(is_valid_mac ${ETH}) -ne 1 ]; do
		sleep 2
		wait_dev=$(($wait_dev+2))		
		report_dev=$((report_dev+1))
		if [ $report_dev -ge 10 ]; then
			echo "NET: wait_dev $ETH $wait_dev.."
			report_dev=0
		fi
	done
	echo "+++ ${ETH} link up at $(uptime)"
fi

start_eth

if [ "$*" = "" ]; then
	echo "+++ Starting dhcp daemon [default]"
	rm -f $KILLDONE
	if [ $DHCP_KILLER_COUNTDOWN -lt 99999 ]; then
		dhcp_killer & killer_pid=$!
	else
		killer_pid=0
	fi
	retries=0
	while [ 1 ]; do
		udhcpc -i $ETH -q -s $DSCRIPT -x hostname:$(hostname) -p $UPID
		if [ $? -eq 0 ]; then
			if [ $killer_pid -ne 0 ]; then
				kill -9 $killer_pid
		        	echo "+++ dhcp good, remove failsafe $killer_pid"
			else
				echo "+++ dhcp good"
			fi
			udhcpc -i $ETH -b -a -s/usr/share/udhcpc/default.script  \
		                -x hostname:$(hostname) -p /var/run/udhcpc.${ETH}.pid

			grep ^[a-z] /tmp/dhcp.env > /tmp/dhcp.env2; mv /tmp/dhcp.env2 /tmp/dhcp.env
			source /tmp/dhcp.env
			break
		elif [ -e $KILLDONE ];then
			echo "+++ udhcpc fail, $KILLDONE detected, proceed with boot up"
			rm $KILLDONE
			break
		else
			retries=$((retries+1))
			if [ $retries -gt 2 ]; then
				echo "+++udhcp tired of spinning, go static, go straight to login"
				set_fallback_static_ip
				exit 1
			else
				echo "+++ udhcpc fail, try again $retries / 2"
			fi
		fi
	done
else
	echo "NET: $ETH set static ip $STATIC_ARGS"
	ifconfig $ETH $STATIC_ARGS
fi


if [ -e /mnt/local/ntpd.conf ]; then
	/mnt/local/ntpd.conf
elif [ "x$ntpsrv" != "x" ]; then
	ntpd -p $ntpsrv
elif [ "x$siaddr" != "x" ]; then
        ntpd -p $siaddr
elif [ "x$serverid" != "x" ]; then
        ntpd -p $serverid
fi

